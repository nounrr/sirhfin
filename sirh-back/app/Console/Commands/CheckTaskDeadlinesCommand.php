<?php

namespace App\Console\Commands;

use App\Models\TodoTask;
use App\Jobs\SendTaskReminderNotifications;
use App\Jobs\SendTaskOverdueNotifications;
use Illuminate\Console\Command;
use Carbon\Carbon;

class CheckTaskDeadlinesCommand extends Command
{
    protected $signature = 'tasks:check-deadlines {--sync}';
    protected $description = 'V√©rifie les t√¢ches et envoie des rappels (2 jours avant √©ch√©ance) et alertes (t√¢ches en retard)';

    public function handle(): int
    {
        $sync = (bool) $this->option('sync');
        $syncOnTaskEvents = config('twilio.sync_on_task_events', false);

        $this->info('üîç V√©rification des √©ch√©ances de t√¢ches...');
        $this->newLine();

        $now = Carbon::now();
        $reminderDate = $now->copy()->addDays(2)->startOfDay();

        // 1. T√¢ches √† rappeler (il reste 2 jours ET pas termin√©es)
        $this->info('üìÖ Recherche des t√¢ches √† rappeler (2 jours avant √©ch√©ance)...');
        
        $tasksToRemind = TodoTask::whereNotNull('end_date')
            ->whereDate('end_date', '=', $reminderDate->format('Y-m-d'))
            ->where(function ($query) {
                $query->where('pourcentage', '<', 100)
                      ->orWhere(function ($q) {
                          $q->where('status', '!=', 'Termin√©e')
                            ->where('status', '!=', 'termin√©e')
                            ->where('status', '!=', 'Annul√©')
                            ->where('status', '!=', 'annul√©');
                      });
            })
            ->get();

        $reminderCount = 0;
        foreach ($tasksToRemind as $task) {
            $this->line("  ‚è∞ T√¢che #{$task->id}: {$task->description} (√©ch√©ance: " . Carbon::parse($task->end_date)->format('d/m/Y') . ")");
            
            if ($sync || $syncOnTaskEvents) {
                $job = new SendTaskReminderNotifications($task->id);
                $job->handle(app(\App\Services\TwilioService::class));
            } else {
                SendTaskReminderNotifications::dispatch($task->id)->onQueue('notifications');
            }
            
            $reminderCount++;
        }

        $this->newLine();
        $this->info("‚úÖ {$reminderCount} rappel(s) de t√¢che envoy√©(s)");
        $this->newLine();

        // 2. T√¢ches en retard (date d√©pass√©e ET progression < 100%)
        $this->info('üö® Recherche des t√¢ches en retard...');
        
        $tasksOverdue = TodoTask::whereNotNull('end_date')
            ->whereDate('end_date', '<', $now->format('Y-m-d'))
            ->where('pourcentage', '<', 100)
            ->where(function ($query) {
                $query->where('status', '!=', 'Termin√©e')
                      ->where('status', '!=', 'termin√©e')
                      ->where('status', '!=', 'Annul√©')
                      ->where('status', '!=', 'annul√©');
            })
            ->get();

        $overdueCount = 0;
        foreach ($tasksOverdue as $task) {
            $daysOverdue = $now->diffInDays(Carbon::parse($task->end_date));
            $this->line("  üö® T√¢che #{$task->id}: {$task->description} (retard: {$daysOverdue} jour(s))");
            
            if ($sync || $syncOnTaskEvents) {
                $job = new SendTaskOverdueNotifications($task->id);
                $job->handle(app(\App\Services\TwilioService::class));
            } else {
                SendTaskOverdueNotifications::dispatch($task->id)->onQueue('notifications');
            }
            
            $overdueCount++;
        }

        $this->newLine();
        $this->info("‚úÖ {$overdueCount} alerte(s) de retard envoy√©e(s)");
        $this->newLine();

        // R√©sum√©
        $totalNotifications = $reminderCount + $overdueCount;
        $this->info("üìä R√©sum√©:");
        $this->line("  ‚Ä¢ Rappels envoy√©s: {$reminderCount}");
        $this->line("  ‚Ä¢ Alertes de retard envoy√©es: {$overdueCount}");
        $this->line("  ‚Ä¢ Total: {$totalNotifications} notification(s)");
        
        if (!$sync && !$syncOnTaskEvents) {
            $this->newLine();
            $this->comment('üí° Les notifications sont en file d\'attente. D√©marrez le worker:');
            $this->line('   php artisan queue:work --queue=notifications');
        }

        return self::SUCCESS;
    }
}
